Relative Strings
================

`NSURL` is fully equipped to resolve relative strings against another URL, but sadly there's no API to go in the opposite direction. KSURLUtilities to the rescue!

	- (NSString *)ks_stringRelativeToURL:(NSURL *)URL;
	- (NSURL *)ks_URLRelativeToURL:(NSURL *)URL;

How's this work? Well, everyone loves examples right?

<table>
	<tr><th>Receiver</th><th>relativeToURL:</th><th>Return Value</th></tr>
	<tr><td>http://karelia.com/foo/bar/</td><td>http://karelia.com/</td><td>foo/bar/</td></tr>
	<tr><td>http://karelia.com/foo/example.png</td><td>http://karelia.com/</td><td>foo/example.png</td></tr>
	<tr><td>http://karelia.com/foo/bar/</td><td>http://example.com/</td><td>http://karelia.com/foo/bar/</td></tr>
	<tr><td>http://karelia.com/</td><td>http://karelia.com/foo/bar/</td><td>../../</td></tr>
	<tr><td>http://karelia.com/baz/index.xml</td><td>http://karelia.com/foo/bar/</td><td>../../baz/index.xml</td></tr>
</table>

Query Parameters
================

It's common for URLs to split their query string up into a dictionary-like series of parameters. e.g.

    http://en.wikipedia.org/w/index.php?title=Main_page&action=raw

`KSURLUtilities` has an easy solution for getting that into a more Cocoa-friendly form:

    - (NSDictionary *)ks_queryParameters;

There are also APIs for creating/deriving new URLs from a dictionary:

    - (NSURL *)ks_URLWithQueryParameters:(NSDictionary *)parameters;
    
	+ (NSURL *)ks_URLWithScheme:(NSString *)scheme
	                       host:(NSString *)host
	                       path:(NSString *)path
	            queryParameters:(NSDictionary *)parameters;

URL Paths
=========

Mac OS X 10.6 gave us a bunch of new URL methods like `-URLByDeletingLastPathComponent`. If you wanted access to this behaviour before, it necessitated much tedious mucking about with `NSString` path methods, or using `CFURL` functions. KSURLUtilities gives simple Cocoa APIs for all these tasks on 10.5 and earlier:

	- (NSString *)ks_lastPathComponent;
	- (NSString *)ks_pathExtension;
	- (NSURL *)ks_URLByAppendingPathExtension:(NSString *)pathExtension;
	- (NSURL *)ks_URLByDeletingLastPathComponent;
	- (NSURL *)ks_URLByDeletingPathExtension;
	- (BOOL)ks_hasDirectoryPath;
	- (NSURL *)ks_URLByAppendingPathComponent:(NSString *)pathComponent isDirectory:(BOOL)isDirectory;

Host
====

Nothing fancy here, just a few additions to the built-in `-[NSURL host]` method.

	- (NSURL *)ks_hostURL;
	
Strips a URL down to nothing but its scheme and host. e.g. `http://karelia.com/foo/bar/` becomes `http://karelia.com/`

	- (NSArray *)ks_domains;
	
Splits the host up into its domains. e.g. `http://www.karelia.com` gives `(www, karelia, com)`

KSWebLocation
=============

A simple class that represents a URL, optionally with a title attached. Features:

- Handles Web Location files (e.g. those created by dragging a URL from Safari)
- NSCoding
- NSCopying

You can pull in the WebKit.framework-dependent KSWebLocationPasteboardAdditions too, to (unsurprisingly) gain support for reading and writing Web Locations from/to the pasteboard.